{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pagemeta docs","text":"<p><code>PageMeta</code> is a dataclass whose function is to httpx.get a given URL's metadata (title, description, open graph image) with BeautifulSoup.</p>"},{"location":"#pagemeta","title":"PageMeta","text":"<p>Extract generic website metadata based on a url fetched on a certain date.</p> <p>All of the fields, except the date, default to <code>None</code>.</p> Field Type Description id str Generated id based on the url's path etag str ETag header on <code>date</code> fetched netloc str URL domain path str URL path title str First matching title parsed from <code>&lt;meta&gt;</code> CSS selectors (and the <code>&lt;title&gt;</code> tag) description str First matching description Parsed from <code>&lt;meta&gt;</code> CSS selectors og_img_url str An open graph (OG) image url detected og_type str A type detected from OG values soup BeautifulSoup See bs4 docs date str The date metadata was fetched in ISO Format Source code in <code>pagemeta/main.py</code> Python<pre><code>@dataclass\nclass PageMeta:\n\"\"\"Extract generic website metadata based on a url fetched on a certain date.\n    All of the fields, except the date, default to `None`.\n    Field | Type | Description\n    :--:|:--:|:--\n    id | str | Generated id based on the url's path\n    etag | str | ETag header on `date` fetched\n    netloc | str | URL domain\n    path | str | URL path\n    title | str | First matching title parsed from `&lt;meta&gt;` CSS selectors (and the `&lt;title&gt;` tag)\n    description | str | First matching description Parsed from `&lt;meta&gt;` CSS selectors\n    og_img_url | str | An [open graph](https://ogp.me/) (OG) image url detected\n    og_type | str | A type detected from OG values\n    soup | BeautifulSoup | See bs4 [docs](https://www.crummy.com/software/BeautifulSoup)\n    date | str | The date metadata was fetched in ISO Format\n    \"\"\"  # noqa: E501\nurl: str\nid: str | None = None\netag: str | None = None\nnetloc: str | None = None\npath: str | None = None\ntitle: str | None = None\ndescription: str | None = None\nog_img_url: str | None = None\nog_type: str | None = None\ndate: str = datetime.datetime.now().isoformat()\nsoup: BeautifulSoup | None = None\ndef __post_init__(self):\nparsed = urlparse(self.url)\nr = httpx.get(self.url)\nself.soup = BeautifulSoup(r.content, \"html.parser\")\nself.id = parsed.path.removeprefix(\"/\").removesuffix(\"/\")\nself.netloc = parsed.netloc\nself.path = parsed.path\nself.etag = r.headers.get(\"etag\")\nself.title = self.select(self.soup, META_TITLE_SELECTORS)\nself.description = self.select(self.soup, META_DESC_SELECTORS)\nself.og_img_url = self.select(self.soup, META_IMAGE_SELECTORS)\nself.og_type = self.select(self.soup, META_TYPE_SELECTORS)\ndef __repr__(self) -&gt; str:\nreturn f\"PageMeta: {self.netloc}/{self.path}\"\n@classmethod\ndef select(\ncls, soup: BeautifulSoup, selectors: Iterable[str]\n) -&gt; str | None:\n\"\"\"The order of CSS selectors. The first one\n        matched, retrieves the content, if found.\n        See present list of selectors used to extract content:\n        ```py\n        META_TITLE_SELECTORS = (\n            'meta[name=\"twitter:title\"]',\n            'meta[property=\"og:title\"]',\n            \"title\",\n        )\n        META_DESC_SELECTORS = (\n            'meta[name=\"twitter:description\"]',\n            'meta[property=\"og:description\"]',\n            'meta[name=\"description\"]',\n        )\n        META_IMAGE_SELECTORS = (\n            'meta[name=\"twitter:image\"]',\n            'meta[property=\"og:image\"]',\n        )\n        META_TYPE_SELECTORS = ('meta[property=\"og:type\"]',)\n        ```\n        Note the special rule on `title` as a selector.\n        Examples:\n            &gt;&gt;&gt; from pathlib import Path\n            &gt;&gt;&gt; html = Path(__file__).parent.parent / \"tests\" / \"data\" / \"test.html\"\n            &gt;&gt;&gt; soup = BeautifulSoup(html.read_text(), \"html.parser\")\n            &gt;&gt;&gt; PageMeta.select(soup, META_TITLE_SELECTORS)\n            'Hello World From Twitter Title!'\n            &gt;&gt;&gt; PageMeta.select(soup, META_DESC_SELECTORS)\n            'this is a description from twitter:desc'\n        Args:\n            soup (BeautifulSoup): Converted html content into a soup object\n            selectors (Iterable[str]): CSS selectors as a tuple\n        Returns:\n            str | None: If found, return the text value.\n        \"\"\"\nfor selector in selectors:\nif selector.startswith(\"meta\"):\nif desc := soup.select(selector):\nif content := desc[0].get(\"content\"):\nif content and isinstance(content, str):\nreturn content\nelif selector == \"title\":\nreturn soup(\"title\")[0].get_text()\nreturn None\n</code></pre>"},{"location":"#pagemeta.main.PageMeta-functions","title":"Functions","text":""},{"location":"#pagemeta.main.PageMeta.select","title":"<code>select(soup, selectors)</code>  <code>classmethod</code>","text":"<p>The order of CSS selectors. The first one matched, retrieves the content, if found.</p> <p>See present list of selectors used to extract content:</p> Python<pre><code>META_TITLE_SELECTORS = (\n'meta[name=\"twitter:title\"]',\n'meta[property=\"og:title\"]',\n\"title\",\n)\nMETA_DESC_SELECTORS = (\n'meta[name=\"twitter:description\"]',\n'meta[property=\"og:description\"]',\n'meta[name=\"description\"]',\n)\nMETA_IMAGE_SELECTORS = (\n'meta[name=\"twitter:image\"]',\n'meta[property=\"og:image\"]',\n)\nMETA_TYPE_SELECTORS = ('meta[property=\"og:type\"]',)\n</code></pre> <p>Note the special rule on <code>title</code> as a selector.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; html = Path(__file__).parent.parent / \"tests\" / \"data\" / \"test.html\"\n&gt;&gt;&gt; soup = BeautifulSoup(html.read_text(), \"html.parser\")\n&gt;&gt;&gt; PageMeta.select(soup, META_TITLE_SELECTORS)\n'Hello World From Twitter Title!'\n&gt;&gt;&gt; PageMeta.select(soup, META_DESC_SELECTORS)\n'this is a description from twitter:desc'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>soup</code> <code>BeautifulSoup</code> <p>Converted html content into a soup object</p> required <code>selectors</code> <code>Iterable[str]</code> <p>CSS selectors as a tuple</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: If found, return the text value.</p> Source code in <code>pagemeta/main.py</code> Python<pre><code>@classmethod\ndef select(\ncls, soup: BeautifulSoup, selectors: Iterable[str]\n) -&gt; str | None:\n\"\"\"The order of CSS selectors. The first one\n    matched, retrieves the content, if found.\n    See present list of selectors used to extract content:\n    ```py\n    META_TITLE_SELECTORS = (\n        'meta[name=\"twitter:title\"]',\n        'meta[property=\"og:title\"]',\n        \"title\",\n    )\n    META_DESC_SELECTORS = (\n        'meta[name=\"twitter:description\"]',\n        'meta[property=\"og:description\"]',\n        'meta[name=\"description\"]',\n    )\n    META_IMAGE_SELECTORS = (\n        'meta[name=\"twitter:image\"]',\n        'meta[property=\"og:image\"]',\n    )\n    META_TYPE_SELECTORS = ('meta[property=\"og:type\"]',)\n    ```\n    Note the special rule on `title` as a selector.\n    Examples:\n        &gt;&gt;&gt; from pathlib import Path\n        &gt;&gt;&gt; html = Path(__file__).parent.parent / \"tests\" / \"data\" / \"test.html\"\n        &gt;&gt;&gt; soup = BeautifulSoup(html.read_text(), \"html.parser\")\n        &gt;&gt;&gt; PageMeta.select(soup, META_TITLE_SELECTORS)\n        'Hello World From Twitter Title!'\n        &gt;&gt;&gt; PageMeta.select(soup, META_DESC_SELECTORS)\n        'this is a description from twitter:desc'\n    Args:\n        soup (BeautifulSoup): Converted html content into a soup object\n        selectors (Iterable[str]): CSS selectors as a tuple\n    Returns:\n        str | None: If found, return the text value.\n    \"\"\"\nfor selector in selectors:\nif selector.startswith(\"meta\"):\nif desc := soup.select(selector):\nif content := desc[0].get(\"content\"):\nif content and isinstance(content, str):\nreturn content\nelif selector == \"title\":\nreturn soup(\"title\")[0].get_text()\nreturn None\n</code></pre>"}]}