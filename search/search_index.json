{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pagemeta docs","text":"<p><code>PageMeta</code> is a dataclass whose function is to httpx.get a given URL's metadata (title, description, open graph image) with BeautifulSoup.</p>"},{"location":"#pagemeta","title":"PageMeta","text":"<p>Extract generic website metadata based on a url fetched on a certain date.</p> <p>All of the fields, except the date, default to <code>None</code>.</p> Field Type Description title str First matching title parsed from <code>&lt;meta&gt;</code> CSS selectors (and the <code>&lt;title&gt;</code> tag) description str First matching description Parsed from <code>&lt;meta&gt;</code> CSS selectors author str Either the author or the creator, if the author is absent image str An open graph (OG) image url detected category str A type detected from OG (\"og:type\") values Source code in <code>pagemeta/meta.py</code> Python<pre><code>@dataclass\nclass PageMeta:\n\"\"\"Extract generic website metadata based on a url fetched on a certain date.\n    All of the fields, except the date, default to `None`.\n    Field | Type | Description\n    :--:|:--:|:--\n    title | str | First matching title parsed from `&lt;meta&gt;` CSS selectors (and the `&lt;title&gt;` tag)\n    description | str | First matching description Parsed from `&lt;meta&gt;` CSS selectors\n    author | str | Either the author or the creator, if the author is absent\n    image | str | An [open graph](https://ogp.me/) (OG) image url detected\n    category | str | A type detected from OG (\"og:type\") values\n    \"\"\"  # noqa: E501\ntitle: str | None = None\ndescription: str | None = None\nauthor: str | None = None\nimage: str | None = None\ncategory: str | None = None\n@classmethod\ndef from_soup(cls, soup: BeautifulSoup):\nreturn cls(\ntitle=cls.select(soup, TITLE),\ndescription=cls.select(soup, DESC),\nauthor=cls.select(soup, AUTHOR),\nimage=cls.select(soup, IMG),\ncategory=cls.select(soup, TYPE),\n)\n@classmethod\ndef select(\ncls, soup: BeautifulSoup, selectors: Iterable[str]\n) -&gt; str | None:\n\"\"\"The order of CSS selectors. The first one\n        matched, retrieves the content, if found.\n        See present list of selectors used to extract content:\n        ```py\n        TITLE = (\n            'meta[name=\"twitter:title\"]',\n            'meta[property=\"og:title\"]',\n            \"title\",\n        )\n        DESC = (\n            'meta[name=\"twitter:description\"]',\n            'meta[property=\"og:description\"]',\n            'meta[name=\"description\"]',\n        )\n        IMG = (\n            'meta[name=\"twitter:image\"]',\n            'meta[property=\"og:image\"]',\n        )\n        AUTHOR = (\n            'meta[name=\"author\"]',\n            'meta[name=\"twitter:creator\"]',\n        )\n        TYPE = ('meta[property=\"og:type\"]',)\n        ```\n        Note the special rule on `title` as a selector.\n        Examples:\n            &gt;&gt;&gt; from pathlib import Path\n            &gt;&gt;&gt; html = Path(__file__).parent.parent / \"tests\" / \"data\" / \"test.html\"\n            &gt;&gt;&gt; soup = BeautifulSoup(html.read_text(), \"html.parser\")\n            &gt;&gt;&gt; PageMeta.select(soup, TITLE)\n            'Hello World From Twitter Title!'\n            &gt;&gt;&gt; PageMeta.select(soup, DESC)\n            'this is a description from twitter:desc'\n        Args:\n            soup (BeautifulSoup): Converted html content into a soup object\n            selectors (Iterable[str]): CSS selectors as a tuple\n        Returns:\n            str | None: If found, return the text value.\n        \"\"\"\nfor selector in selectors:\nif selector.startswith(\"meta\"):\nif desc := soup.select(selector):\nif content := desc[0].get(\"content\"):\nif content and isinstance(content, str):\nreturn content\nelif selector == \"title\":\nif titles := soup(\"title\"):\nreturn titles[0].get_text()\nreturn None\n</code></pre>"},{"location":"#pagemeta.main.PageMeta-functions","title":"Functions","text":""},{"location":"#pagemeta.meta.PageMeta.select","title":"<code>select(soup, selectors)</code>  <code>classmethod</code>","text":"<p>The order of CSS selectors. The first one matched, retrieves the content, if found.</p> <p>See present list of selectors used to extract content:</p> Python<pre><code>TITLE = (\n'meta[name=\"twitter:title\"]',\n'meta[property=\"og:title\"]',\n\"title\",\n)\nDESC = (\n'meta[name=\"twitter:description\"]',\n'meta[property=\"og:description\"]',\n'meta[name=\"description\"]',\n)\nIMG = (\n'meta[name=\"twitter:image\"]',\n'meta[property=\"og:image\"]',\n)\nAUTHOR = (\n'meta[name=\"author\"]',\n'meta[name=\"twitter:creator\"]',\n)\nTYPE = ('meta[property=\"og:type\"]',)\n</code></pre> <p>Note the special rule on <code>title</code> as a selector.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; html = Path(__file__).parent.parent / \"tests\" / \"data\" / \"test.html\"\n&gt;&gt;&gt; soup = BeautifulSoup(html.read_text(), \"html.parser\")\n&gt;&gt;&gt; PageMeta.select(soup, TITLE)\n'Hello World From Twitter Title!'\n&gt;&gt;&gt; PageMeta.select(soup, DESC)\n'this is a description from twitter:desc'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>soup</code> <code>BeautifulSoup</code> <p>Converted html content into a soup object</p> required <code>selectors</code> <code>Iterable[str]</code> <p>CSS selectors as a tuple</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>str | None: If found, return the text value.</p> Source code in <code>pagemeta/meta.py</code> Python<pre><code>@classmethod\ndef select(\ncls, soup: BeautifulSoup, selectors: Iterable[str]\n) -&gt; str | None:\n\"\"\"The order of CSS selectors. The first one\n    matched, retrieves the content, if found.\n    See present list of selectors used to extract content:\n    ```py\n    TITLE = (\n        'meta[name=\"twitter:title\"]',\n        'meta[property=\"og:title\"]',\n        \"title\",\n    )\n    DESC = (\n        'meta[name=\"twitter:description\"]',\n        'meta[property=\"og:description\"]',\n        'meta[name=\"description\"]',\n    )\n    IMG = (\n        'meta[name=\"twitter:image\"]',\n        'meta[property=\"og:image\"]',\n    )\n    AUTHOR = (\n        'meta[name=\"author\"]',\n        'meta[name=\"twitter:creator\"]',\n    )\n    TYPE = ('meta[property=\"og:type\"]',)\n    ```\n    Note the special rule on `title` as a selector.\n    Examples:\n        &gt;&gt;&gt; from pathlib import Path\n        &gt;&gt;&gt; html = Path(__file__).parent.parent / \"tests\" / \"data\" / \"test.html\"\n        &gt;&gt;&gt; soup = BeautifulSoup(html.read_text(), \"html.parser\")\n        &gt;&gt;&gt; PageMeta.select(soup, TITLE)\n        'Hello World From Twitter Title!'\n        &gt;&gt;&gt; PageMeta.select(soup, DESC)\n        'this is a description from twitter:desc'\n    Args:\n        soup (BeautifulSoup): Converted html content into a soup object\n        selectors (Iterable[str]): CSS selectors as a tuple\n    Returns:\n        str | None: If found, return the text value.\n    \"\"\"\nfor selector in selectors:\nif selector.startswith(\"meta\"):\nif desc := soup.select(selector):\nif content := desc[0].get(\"content\"):\nif content and isinstance(content, str):\nreturn content\nelif selector == \"title\":\nif titles := soup(\"title\"):\nreturn titles[0].get_text()\nreturn None\n</code></pre>"}]}